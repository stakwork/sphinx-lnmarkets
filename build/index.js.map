{"version":3,"sources":["../index.js"],"names":["dotenv","config","msg_types","Sphinx","MSG_TYPE","initted","lnmarketsToken","process","env","LNMARKETS_TOKEN","sphinxToken","SPHINX_TOKEN","url","init","client","Client","login","on","INSTALL","message","embed","MessageEmbed","setAuthor","setDescription","setThumbnail","botSVG","channel","send","MESSAGE","arr","content","split","length","cmd","isAdmin","member","roles","find","role","name","fetch","headers","r","ok","json","j","balance","r2","j2","Array","isArray","fields","map","p","date","creation_ts","format","value","price","takeprofit","margin","console","log","embed2","setTitle","addFields","embed3"],"mappings":"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","sourcesContent":["import 'regenerator-runtime/runtime.js';\nimport * as Sphinx from 'sphinx-bot'\nimport * as fetch from 'node-fetch'\nimport dotenv from 'dotenv'\nimport moment from 'moment'\ndotenv.config()\n\nconst msg_types = Sphinx.MSG_TYPE\n\nlet initted = false\n\nconst lnmarketsToken = process.env.LNMARKETS_TOKEN\nconst sphinxToken = process.env.SPHINX_TOKEN\nconst url = 'https://api.lnmarkets.com'\n\nfunction init() {\n  if(initted) return\n  initted = true\n\n  const client = new Sphinx.Client()\n  client.login(sphinxToken)\n\n  client.on(msg_types.INSTALL, async (message) => {\n    const embed = new Sphinx.MessageEmbed()\n      .setAuthor('LNMarkets')\n      .setDescription('Welcome to LNMarkets!')\n      .setThumbnail(botSVG)\n    message.channel.send({ embed })\n  })\n\n  client.on(msg_types.MESSAGE, async (message) => {\n    const arr = message.content.split(' ')\n    if (arr.length < 2) return\n    if (arr[0]!=='/lnm') return\n    const cmd = arr[1]\n\n    const isAdmin = message.member.roles.find(role => role.name === 'Admin')\n    \n    switch (cmd) {\n\n      case 'balance':\n        if(!isAdmin) {\n          const embed = new Sphinx.MessageEmbed()\n            .setAuthor('LNMarkets')\n            .setDescription('You must be an Admin to use this command')\n            .setThumbnail(botSVG)\n          message.channel.send({ embed })\n          return\n        }\n        const r = await fetch(url+'/user',{\n          headers:{'Authorization': `Bearer ${lnmarketsToken}`, 'Accept': 'application/json'}\n        })\n        if (!r.ok) return\n        const j = await r.json()\n        if(!j.balance) return\n        const embed = new Sphinx.MessageEmbed()\n          .setAuthor('LNMarkets')\n          .setDescription('Your balance is: '+j.balance)\n          .setThumbnail(botSVG)\n        message.channel.send({ embed })\n        return\n\n      case 'positions':\n        const r2 = await fetch(url+'/positions',{\n          headers:{'Authorization': `Bearer ${lnmarketsToken}`, 'Accept': 'application/json'}\n        })\n        if (!r2.ok) return\n        const j2 = await r2.json()\n        if(!(j2 && Array.isArray(j2))) return\n        const fields = j2.map(p=>{\n          const date = moment(p.creation_ts).format('ddd, MMM DD h:mm')\n          return {\n            name:date, value:`Price: ${p.price}, Take Profit: ${p.takeprofit}, Margin: ${p.margin}`\n          }\n        })\n        console.log(fields)\n        const embed2 = new Sphinx.MessageEmbed()\n          .setAuthor('LNMarkets')\n          .setTitle('Positions:')\n          .addFields(fields)\n          .setThumbnail(botSVG)\n        message.channel.send({ embed:embed2 })\n        return\n        \n      default:\n        const embed3 = new Sphinx.MessageEmbed()\n          .setAuthor('LNMarkets')\n          .setTitle('LNMarkets Commands:')\n          .addFields([\n            { name: 'Balance', value: '/lnm balance' },\n            { name: 'Positions', value: '/lnm positions' },\n            { name: 'Help', value: '/lnm help' }\n          ])\n          .setThumbnail(botSVG)\n        message.channel.send({ embed:embed3 })\n        return\n    }\n  })\n}\n\nconst botSVG = `<svg viewBox=\"64 64 896 896\" height=\"12\" width=\"12\" fill=\"white\">\n  <path d=\"M300 328a60 60 0 10120 0 60 60 0 10-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 10120 0 60 60 0 10-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" />\n</svg>`\n\ninit()"],"file":"index.js"}